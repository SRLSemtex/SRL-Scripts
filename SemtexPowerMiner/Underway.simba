program underWay;
{$DEFINE SMART}
{$i srl-6/srl.simba}
{$i sps/lib/sps-rs3.simba}
{$i srl-6/lib/misc/srlplayerform.simba}

type
  TMSObject = record
    name: String;
    overText, tOption: TStringArray;
    colour: TColorData;
  end;

var
  startingXP: integer;
  FailTimer: TTimeMarker;
  TinT, CopperC, IronI, CoalC: TMSObject;

procedure TMSObject.init(_Name:String; _overText, _tOption:TStringArray; _colour:TColorData);
begin
  self.Name     := _Name;
  self.overText := _overText;
  self.tOption  := _tOption;
  self.colour   := _Colour;
end;

procedure loadObjects;
begin
  TinT.init('Tin',        ['in'],     ['ine Tin'],    [4808543, 7, [2, [0.14, 0.15, 0.00]]]);
  CopperC.init('Copper',  ['opper'],  ['ine Copper'], [4808543, 7, [2, [0.14, 0.15, 0.00]]]);
  IronI.init('Iron',      ['ron'],    ['ine Iron'],   [4808543, 7, [2, [0.14, 0.15, 0.00]]]);
  CoalC.init('Coal',      ['oal'],    ['ine Coal'],   [4808543, 7, [2, [0.14, 0.15, 0.00]]]);
end;

procedure initPlayerForm();
begin
  with playerForm do
  begin
   name := 'Semtex Fishing Guild';
   editBoxLabels := ['World', 'Break In', 'Break For'];
   editBoxDefaults := ['-1', '60', '5'];
   editBoxHints := ['0 For Random World, -1 For Just Play','Minutes Until Break', 'Minutes To Break For'];

   comboBoxLabels := ['Ore To Power Mine'];
   comboBoxDefaults := ['Iron'];
   comboBoxHints := ['Which Ore Do You Wish To Power Mine?'];

   setLength(comboBoxItems, length(comboBoxLabels));
   comboBoxItems[0] := ['Tin', 'Copper', 'Iron', 'Coal'];

   checkBoxLabels := ['Disable SRL Debug?'];
   checkBoxDefaults := ['True'];
  end;
end;

procedure declarePlayers();
var
  i: integer;
begin
  players.setup(playerForm.players);
  currentPlayer := 0;

  for i := 0 to high(players) do
    with players[i] do
    begin
      integers[0] := strToInt(playerForm.players[i].settings[0]);
      integers[1] := strToInt(playerForm.players[i].settings[1]) * 60000;
      integers[2] := strToInt(playerForm.players[i].settings[2]) * 60000;

      booleans[0] := strToBool(playerForm.players[i].settings[3]);

      strings[0] := playerForm.players[i].settings[4];

      world := integers[0];
    end;
end;

{*Borrowed from The Mayor's Resource Dungeon Script*}
procedure loginPlayer();
begin
  players[currentPlayer].login();
  wait(randomRange(4000, 6000));
  minimap.clickCompass();
  mainscreen.setAngle(MS_ANGLE_HIGH);
  exitTreasure();
  closePopup();
  mainScreen.setZoom(true);
end;

{*Borrowed from The Mayor's Resource Dungeon Script*}
procedure takeBreak();
var
  time: Integer;
begin
  if (players[currentPlayer].worked.getTime() > players[currentPlayer].integers[1]) then
  begin
    time := round(players[currentPlayer].integers[2] * 0.1);
    time := players[currentPlayer].integers[2] + random(-time, time);
    writeLn('Taking a ' + toStr(round(time / 60000, 2)) + ' minute break');
    players[currentPlayer].exitToLobby();
    mouseOffClient(OFF_CLIENT_RANDOM);
    sleep(time);
    loginPlayer();
    players[currentPlayer].worked.start();
    FailTimer.start();
  end;
end;

function TMSObject.Find(): Boolean;
var
  i: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
begin

  if Self.Colour.gatherIn(TPA, mainScreen.getBounds()) then
  begin
    ATPA := TPA.cluster(15);
    if (length(ATPA) < 1) then exit(false);

    for i := 0 to high(ATPA) do
    begin
      mouse(ATPA[i].getBounds().getRandomPoint());
      if isMouseOverText(Self.OverText) then
      else if (random(6) <> 0) then
      begin
        fastClick(MOUSE_LEFT);
        break();
        end else
        begin
          fastClick(MOUSE_RIGHT);
          result := chooseOption.select(self.tOption);
          if result then exit(true);
        end;
    end;
  end;
end;

function waitOre(): Boolean;
var
  count: Integer := tabBackPack.count();
  timer: TTimeMarker;
begin
  timer.start();
  repeat
    wait(300);
    if (tabBackPack.count() <> count) then exit(true);
  until (getPixelShiftAverage(mainscreen.playerBox, 100, 700) < 20) or (timer.getTime() > 10000);
end;

procedure TMSObject.mine();
var
  aTimer, bTimer: TTimeMarker;
  initialCount: Integer;
begin
  aTimer.start;
  if not isLoggedIn() then exit();

  if tabBackPack.isFull() then exit();

  repeat

    if self.find() then
    begin
      writeLn('Starting To Mine');
    end;
      repeat
        bTimer.start;
        initialCount := tabBackPack.count();
        if not waitOre or tabBackPack.isFull then
          break;
          if (initialCount <> tabBackPack.count()) then
          begin
            bTimer.start;
            initialCount := tabBackPack.count();
          end;
      until (bTimer.getTime > randomRange(35000,40000));
        writeLn('Done Mining');
      if (bTimer.getTime > 600000) then
      begin
        writeLn('It Took More Than 10 Minutes To Fill Inventory, Shutting Down');
        terminatescript;
      end;
  until tabBackPack.isFull();
    writeLn('Inventory Is Full');
end;

procedure dropOre();
var
  timer: TTimeMarker;
begin
  if not isLoggedIn() then exit;

  if (tabBackPack.count() >= 27) then exit;

  timer.start();
  repeat

    tabBackPack.dropItems(DROP_PATTERN_REGULAR);

  until tabBackPack.isEmpty or (timer.getTime() > 10000);

end;

procedure progressReport();

begin

end;

procedure mainLoop();
begin
  case tabBackPack.isFull() of
    true: dropOre();
    false: begin
            case players[currentPlayer].strings[0] of
              'Tin':    begin
                          TinT.mine;
                        end;

              'Copper': begin
                          CopperC.mine;
                        end;

              'Iron':   begin
                          IronI.mine;
                        end;

              'Coal':   begin
                          CoalC.mine;
                        end;
            end;
          end;
  end;
  progressReport();
  takeBreak();
end;

begin
  clearDebug();
  initPlayerForm();
  runPlayerForm();
  if not playerForm.isScriptReady then exit();

  declarePlayers();
  mouseSpeed := randomRange(25,31);

  {$IFDEF SMART}
    smartEnableDrawing := True;
    smartShowConsole := False;
  {$ENDIF}

  disableSRLLog := True;
  disableSRLDebug := players[currentPlayer].booleans[0];
  setupSRL();
  if not isLoggedIn() then
  loginPlayer();
  startingXP := chatBox.getXPBar();
  players[currentPlayer].worked.start();
  FailTimer.start();
  //findSpot(false);

  repeat
    if not isLoggedIn() then loginPlayer();
    mainLoop();
  until false;
end.
